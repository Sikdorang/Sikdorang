generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique(map: "RefreshToken_token_key")
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId], map: "RefreshToken_userId_fkey")
}

model User {
  id         Int      @id @default(autoincrement())
  kakaoId    BigInt   @unique(map: "User_kakaoId_key")
  nickname   String?
  created_at DateTime @default(now())

  stores Store[] // 1:N 관계 설정 (User → Store)
}

model Store {
  id              Int      @id @default(autoincrement())
  store           String // 가게 이름
  pinNumber       String // 핀 번호
  description     String? // 가게 설명
  wifiId          String? // 와이파이 아이디
  wifiPassword    String? // 와이파이 비밀번호
  phoneNumber     String? // 전화번호
  naverPlace      String? // 네이버 플레이스 주소
  corkagePossible Boolean? // 콜키지 가능 여부
  corkageFree     Boolean? // 콜키지 무료 여부
  toilet          String? // 화장실 정보
  userId          Int // 외래키: User
  createdAt       DateTime @default(now())

  categories Category[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  hours      Hours[]
  informationOrders InformationOrder[]
  storeTables StoreTable[]

  @@index([userId], map: "Store_userId_fkey")
}

model Category {
  id       Int    @id @default(autoincrement())
  category String // 카테고리 이름
  order    String // 카테고리 순서
  storeId  Int // 가게 Id

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

enum Day {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model Hours {
  id        Int   @id @default(autoincrement())
  storeId   Int
  day       Day
  startHour Int
  startMin  Int
  endHour   Int
  endMin    Int
  open      Boolean

  store     Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model InformationOrder {
  id                Int    @id @default(autoincrement())
  phoneNumberOrder  String // 전화번호 순서
  hoursOrder        String // 영업 시간 순서
  corkageOrder      String // 콜키지 순서
  naverPlaceOrder   String // 네이버 플레이스 순서
  wifiOrder         String // 와이파이 순서
  ToiletOrder       String // 화장실 순서
  storeId           Int    // 가게 정보

  store             Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model StoreTable {
  id          Int     @id @default(autoincrement())
  tableNumber Int
  tableToken  String
  storeId     Int

  store       Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
}