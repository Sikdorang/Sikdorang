generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id       Int    @id @default(autoincrement())
  category String
  order    String
  storeId  Int

  menus    Menu[] @relation("CategoryMenus")

  @@index([storeId], map: "Category_storeId_fkey")
}

model Hours {
  id        Int       @id @default(autoincrement())
  storeId   Int
  day       Day
  startHour Int
  startMin  Int
  endHour   Int
  endMin    Int
  open      Boolean

  @@index([storeId], map: "Hours_storeId_fkey")
}

model InformationOrder {
  id               Int    @id @default(autoincrement())
  phoneNumberOrder String
  hoursOrder       String
  corkageOrder     String
  naverPlaceOrder  String
  wifiOrder        String
  ToiletOrder      String
  storeId          Int

  @@index([storeId], map: "InformationOrder_storeId_fkey")
}

model Menu {
  id          Int         @id @default(autoincrement())
  menu        String
  price       Int         @default(0)
  status      Status      @default(SALE)
  description String?
  new         Boolean     @default(false)
  recommended Boolean     @default(false)
  popular     Boolean     @default(false)
  order       String
  categoryId  Int?
  storeId     Int

  @@index([categoryId], map: "Menu_categoryId_fkey")
  @@index([storeId], map: "Menu_storeId_fkey")
  menuOptions MenuOption[]
  images      Image[]   
  orderItems  OrderItem[]
  category    Category?   @relation("CategoryMenus", fields: [categoryId], references: [id], onDelete: Cascade)
}

model Image {
  id       Int     @id @default(autoincrement())
  image    String  // 이미지 이름
  menuId   Int     // 메뉴 아이디(FK)
  deleted  Boolean @default(false) // 소프트 삭제
  order    String  
  menu     Menu    @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@index([menuId], map: "Image_menuId_idx")
}

model MenuOption {
  id             Int     @id @default(autoincrement())
  option         String
  maxOption      Int     @default(1)
  minOption      Int     @default(0)
  optionRequired Boolean @default(false)
  menuId         Int

  menu           Menu            @relation(fields: [menuId], references: [id], onDelete: Cascade)
  optionDetails  OptionDetail[]
  orderItemOptions OrderItemOption[]
  @@index([menuId], map: "menuOption_menuId_fkey")
}

model OptionDetail {
  id             Int     @id @default(autoincrement())
  optionDetail   String
  menuOptionId   Int
  price          Int

  menuOption     MenuOption     @relation(fields: [menuOptionId], references: [id], onDelete: Cascade)
  orderItemOptionDetails OrderItemOptionDetail[]
  
  @@index([menuOptionId], map: "optionDetail_menuOptionId_fkey")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique(map: "RefreshToken_token_key") @db.VarChar(512)
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId], map: "RefreshToken_userId_fkey")
}

model Store {
  id              Int      @id @default(autoincrement())
  store           String
  pinNumber       String
  description     String?
  wifiId          String?
  wifiPassword    String?
  phoneNumber     String?
  naverPlace      String?
  corkagePossible Boolean?
  corkageFree     Boolean?
  toilet          String?
  userId          Int
  createdAt       DateTime @default(now())

  orders          Order[] 

  @@index([userId], map: "Store_userId_fkey")
}

model StoreTable {
  id          Int    @id @default(autoincrement())
  tableNumber Int
  tableToken  String
  storeId     Int

  @@index([storeId], map: "StoreTable_storeId_fkey")
}

model User {
  id         Int      @id @default(autoincrement())
  kakaoId    BigInt   @unique(map: "User_kakaoId_key")
  nickname   String?
  created_at DateTime @default(now())
}

enum Day {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

enum Status {
  SALE
  HIDDEN
  SOLDOUT
}

model Order {
  id          Int       @id @default(autoincrement())
  token       String    // 주문자 토큰
  createdAt   DateTime  @default(now())
  tableNumber Int?
  storeId     Int

  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@index([storeId], map: "Order_storeId_fkey")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  menuId    Int
  quantity  Int

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menu      Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  options   OrderItemOption[]

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([menuId], map: "OrderItem_menuId_fkey")
}

model OrderItemOption {
  id             Int      @id @default(autoincrement())
  orderItemId    Int
  menuOptionId   Int

  orderItem      OrderItem     @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  menuOption     MenuOption    @relation(fields: [menuOptionId], references: [id], onDelete: Cascade)
  optionDetails  OrderItemOptionDetail[]

  @@index([orderItemId], map: "OrderItemOption_orderItemId_fkey")
  @@index([menuOptionId], map: "OrderItemOption_menuOptionId_fkey")
}

model OrderItemOptionDetail {
  id                   Int     @id @default(autoincrement())
  orderItemOptionId    Int
  optionDetailId       Int

  orderItemOption      OrderItemOption @relation(fields: [orderItemOptionId], references: [id], onDelete: Cascade)
  optionDetail         OptionDetail    @relation(fields: [optionDetailId], references: [id], onDelete: Cascade)

  @@index([orderItemOptionId], map: "OrderItemOptionDetail_orderItemOptionId_fkey")
  @@index([optionDetailId], map: "OrderItemOptionDetail_optionDetailId_fkey")
}